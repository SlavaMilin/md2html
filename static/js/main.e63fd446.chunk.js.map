{"version":3,"sources":["App.tsx","redusers/html.tsx","redusers/index.tsx","index.tsx"],"names":["classMap","table","bindings","Object","keys","map","key","regex","RegExp","concat","replace","type","converter","showdown","Converter","disableForced4SpacesIndentedSublists","extensions","toConsumableArray","headerLevelStart","tables","setFlavor","App","textarea","React","createRef","onConvertBtnClick","_this","props","makeHtml","current","value","this","react_default","a","createElement","className","onClick","rows","ref","defaultValue","html","readOnly","Component","connect","state","dispatch","payload","arguments","length","undefined","action","combineReducers","store","createStore","redusers","composeWithDevTools","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"qQASMA,EAAsC,CAC1CC,MAAO,sCAGHC,EAAgBC,OAAOC,KAAKJ,GAAUK,IAAI,SAAAC,GAAG,MAAK,CACtDC,MAAO,IAAIC,OAAJ,IAAAC,OAAeH,EAAf,SAA2B,KAClCI,QAAO,IAAAD,OAAMH,EAAN,YAAAG,OAAoBT,EAASM,GAA7B,SACPK,KAAM,YAGFC,EAAY,IAAIC,IAASC,UAAU,CACvCC,sCAAsC,EACtCC,WAAWb,OAAAc,EAAA,EAAAd,CAAKD,GAChBgB,iBAAkB,EAClBC,QAAQ,IAGVN,IAASO,UAAU,cAEbC,6MACIC,SAAWC,IAAMC,cA+CjBC,kBAAoB,WAC1BC,EAAKC,MAAMF,kBACTb,EAAUgB,SAASF,EAAKJ,SAASO,QAASC,4FA9C5CC,KAAKJ,MAAMF,kBACTb,EAAUgB,SAASG,KAAKT,SAASO,QAASC,yCAK5C,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAd,uFACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,uDACAH,EAAAC,EAAAC,cAAA,UACEC,UAAU,uBACVC,QAASL,KAAKN,mBAFhB,8FAMAO,EAAAC,EAAAC,cAAA,YACEC,UAAU,eACVE,KAAM,GACNC,IAAKP,KAAKT,SACViB,aAAa,8GAGjBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,2DACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oCAAlB,sEAGAH,EAAAC,EAAAC,cAAA,YACEG,KAAM,GACNF,UAAU,eACVL,MAAOC,KAAKJ,MAAMa,KAClBC,UAAU,eAvCRC,aAuDHC,cACb,SAAAC,GAAK,MAAK,CACRJ,KAAMI,EAAMJ,OAEd,SAAAK,GAAQ,MAAK,CACXpB,kBAAmB,SAACe,GAClBK,EAAS,CAAElC,KAAM,cAAemC,QAASN,OANhCG,CASbtB,GClFamB,EARF,WAAkE,IAAjEI,EAAiEG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFlD,2GAEOG,EAA2CH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7E,MAAoB,gBAAhBC,EAAOvC,KACFuC,EAAOJ,QAGTF,GCJMO,4BAAgB,CAC7BX,SCKIY,EAAQC,sBAAYC,EAAUC,iCAEpCC,IAASC,OACPzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAUN,MAAOA,GACfpB,EAAAC,EAAAC,cAACyB,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.e63fd446.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport showdown from \"showdown\";\n\ninterface IProps {\n  html: string;\n  onConvertBtnClick: any;\n}\n\nconst classMap: { [key: string]: string } = {\n  table: \"table table-striped table-bordered\"\n};\n\nconst bindings: any = Object.keys(classMap).map(key => ({\n  regex: new RegExp(`<${key}(.*)>`, \"g\"),\n  replace: `<${key} class=\"${classMap[key]}\" $1>`,\n  type: \"output\"\n}));\n\nconst converter = new showdown.Converter({\n  disableForced4SpacesIndentedSublists: true,\n  extensions: [...bindings],\n  headerLevelStart: 3,\n  tables: true\n});\n\nshowdown.setFlavor(\"github\");\n\nclass App extends Component<IProps> {\n  private textarea = React.createRef<HTMLTextAreaElement>();\n\n  public componentDidMount(): void {\n    this.props.onConvertBtnClick(\n      converter.makeHtml(this.textarea.current!.value)\n    );\n  }\n\n  public render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <h3 className=\"text-center mb-3 mt-3\">Конвертер из md в html.</h3>\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <h4 className=\"text-center\">Вставьте md</h4>\n              <button\n                className=\"btn btn-primary mb-2\"\n                onClick={this.onConvertBtnClick}\n              >\n                Сконвертировать\n              </button>\n              <textarea\n                className=\"form-control\"\n                rows={20}\n                ref={this.textarea}\n                defaultValue=\"#Тестовый заголовок\"\n              />\n            </div>\n            <div className=\"col-6\">\n              <h4 className=\"text-center\">Результат:</h4>\n              <button className=\"btn btn-primary float-right mb-2\">\n                Скопировать\n              </button>\n              <textarea\n                rows={20}\n                className=\"form-control\"\n                value={this.props.html}\n                readOnly={true}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private onConvertBtnClick = () => {\n    this.props.onConvertBtnClick(\n      converter.makeHtml(this.textarea.current!.value)\n    );\n  };\n}\n\nexport default connect<any, any, any, any>(\n  state => ({\n    html: state.html\n  }),\n  dispatch => ({\n    onConvertBtnClick: (html: any) => {\n      dispatch({ type: \"HTML_MARKUP\", payload: html });\n    }\n  })\n)(App);\n","const initialState: string = \"#Тестовый заголовок\";\n\nconst html = (state = initialState, action: { type: string; payload: any }) => {\n  if (action.type === \"HTML_MARKUP\") {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default html;\n","import { combineReducers } from \"redux\";\nimport html from \"./html\";\n\nexport default combineReducers({\n  html\n});\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport App from \"./App\";\nimport redusers from \"./redusers\";\n\nconst store = createStore(redusers, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}